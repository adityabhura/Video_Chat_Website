<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zoom-Clone</title>
    <link rel="stylesheet" href="../../style.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"></script>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
    <script src="https://unpkg.com/peerjs@1.2.0/dist/peerjs.min.js"></script>
    <script src="https://kit.fontawesome.com/c939d0e917.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        var callId="<%=callId%>"
        var callerHandlename="<%=query.callerHandlename%>" 
        var name="<%= currentUser.name %>"
        var recieverHandlename=  "<%=query.reciverHandlename%>" 
        var portForPeer="<%= portForPeer %>";
    </script>
    <script src="/socket.io/socket.io.js" ></script>
    <script>
        var socket=io()
        function play(){
            document.getElementById('chatAudio').play()
        }
        
        socket.on('call-declined-by-reciever',function(){
           alert("Call Declined")
           window.close();
        })

        socket.on('limit-exceded-in-call-alert',function(){
            alert('You are already on this call')
            window.location.href="/abcdefghijklmnopqrstuvwyz";
        })
        

    </script>
</head>
<body>
    <div class="main">
        <div class="main_left">
            <div class="main_videos">
                <div id='video-grid'>

                </div>
            </div>
            <div class="main_controls">
                <div class="main_controls_block">
                    <div onclick="muteUnmute()" class="main_controls_button main_mute_button">
                        <i class="fas fa-microphone"></i>
                        <span>Mute</span>
                    </div>
                    <div onclick="playStop()" class="main_controls_button main_video_button"> 
                        <i class="fas fa-video"></i>
                        <span>Stop Video</span>
                    </div>
                </div>

                <div class="main_controls_block">
                    <div class="main_controls_button">
                        <i class="fas fa-shield-alt"></i>
                        <span>Security</span>
                    </div>
                    <div class="main_controls_button"> 
                        <i class="fas fa-user-friends"></i>
                        <span>Participants</span>
                    </div>
                    <div class="main_controls_button">
                        <i class="fas fa-comment-alt"></i>
                        <span>Chat</span>
                    </div>
                </div>

                <div class="main_controls_block">
                    
                    <div class="main_controls_button"> 
                        <span class="leave_meeting">Leave Meeting</span>
                    </div>
                </div>

            </div>
        </div>
        <div class="main_right">
            <div class="main_header">
                <h6>Chat</h6>
            </div>
            <div class="main_chat_window">
                <ul class="messages">

                </ul>
            </div>
            <div class="main_message_container">
                <input id="chat_message" type="text" placeholder="Type message here...">
            </div>
        </div>

    </div>
    <script>
var videoGrid = document.getElementById('video-grid');
var myVideo = document.createElement('video');
myVideo.muted = true;

var peer = new Peer(undefined, {
    path: '/peerjs',
    host: '/',
    port: portForPeer
});

let myVideoStream;

 //If the the metadata is loaded completely after that our video starts to play i.e. our camera becomes on
var addVideoStream = (video, stream) => {
    video.srcObject = stream;
    video.addEventListener('loadedmetadata', () => {
        video.play();
    })
    videoGrid.append(video);
};

var connectToNewUser = (userId, stream) => {
  console.log("Connecting to new user");
  //This function will call a user with userId passed and it will pass the stream to that user
    var call = peer.call(userId, stream);
    var video = document.createElement('video');
    
    //THis events does that when we call this user we're gonna send them 
    //our video stream and when they send us back their video 
    //stream we are gonna get this event here called the 
    //stream which is going to take their video stream so 
    call.on('stream', userVideoStream => {
      console.log("Adding video stream")
       //We are taking stream from the other user that we are calling and adding it to out own custom video element on our page
        addVideoStream(video, userVideoStream);
    })

    //Whenever someone leaves the video call we want to remove their video so we use the following code
    call.on('close',function(){
        console.log("removing User at",new Date())
        video.remove();
    })

    
    peer[userId]=call;
}

//coneecting our video
//stream is out audio and video

// socket.on('user-limit',function(limit){
//     if(limit){
//         window.location.href = "/";
//     }
// })

navigator.mediaDevices.getUserMedia({
    video: true,
    audio: true
}).then(stream => {
    myVideoStream = stream;
    addVideoStream(myVideo, stream);
    console.log("Tik TIk")
    //When someone tries to call us we will send our stream through it
    peer.on('call', call => {
        call.answer(stream)
        var video = document.createElement('video');
        call.on('stream', userVideoStream => {
            addVideoStream(video, userVideoStream)
        })
        call.on('close',function(){
            console.log("removing User 1")
            video.remove();
        })
    })

    socket.on('user-connected', (userId,name) => {
    alert(name +"joined");
      console.log("User connected with userId",userId)
        connectToNewUser(userId, stream);
    })

    socket.on('user-disconnected', (userId,name) => {
        alert(name+" left");
        var leave=confirm("Leave Call")
        if(leave){
            window.close()
        }
        
        console.log("User disconnected with userId",userId,"at",new Date());    
        connectToNewUser(userId, stream); 
      })
}).catch(function(err){
    alert(err);
})



peer.on('open', id => {
    console.log("Opening peer")
    socket.emit('joined-call',callId,id,name);
});






let text = $('input');
    $('html').keydown(e => {
        if (e.which == 13 && text.val().length !== 0) {
            socket.emit('message', {text:text.val(),name:name});
            console.log(text.val());
            text.val('')
        }
    });

    socket.on('createMessage', message => {
        $('ul').append(`<li class="message"><b>${message.name}</b><br />${message.text}</li>`)
        scrollToBottom();
    })

var setPlayVideo = () => {
    var html = `
    <i class="stop fas fa-video-slash"></i>
    <span>PlayVideo</span>`
    $('.main_video_button').html(html);
}

var setStopVideo = () => {
    var html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>`
    $('.main_video_button').html(html);
}


var playStop = () => {
    let enabled = myVideoStream.getVideoTracks()[0].enabled;
    if(enabled){
        myVideoStream.getVideoTracks()[0].enabled = false;
        setPlayVideo();
    }
    else {
        setStopVideo();
        myVideoStream.getVideoTracks()[0].enabled = true;
    }
}


var scrollToBottom = () => {
    let d = $('main_chat_window');
    d.scrollTop(d.prop("scrollHeight"));
}
var setMuteButton = () => {
    var html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>`
    $('.main_mute_button').html(html);
}

var setUnmuteButton = () => {
    var html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Ummte</span>`
    $('.main_mute_button').html(html);
}

var muteUnmute = () => {
    var enabled = myVideoStream.getAudioTracks()[0].enabled;
    if(enabled){
        myVideoStream.getAudioTracks()[0].enabled = false;
        setUnmuteButton();
    }
    else {
        setMuteButton();
        myVideoStream.getAudioTracks()[0].enabled = true;
    }

    
}
    </script>
</body>
</html>